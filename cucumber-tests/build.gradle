plugins {
    id 'java'
    id 'jacoco'
    id 'io.freefair.aspectj.post-compile-weaving' version '8.4'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

// Java compatibility settings
sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

repositories {
    mavenCentral()
}
// Global JaCoCo configuration
jacoco {
    toolVersion = "0.8.11"  // Set tool version globally
}

def cucumberVersion = '7.15.0'

dependencies {
    implementation project(':')

    // AspectJ runtime and weaver (weaving handled by plugin)
    implementation 'org.aspectj:aspectjrt:1.9.21'
    implementation 'org.aspectj:aspectjweaver:1.9.21'
    implementation "com.fasterxml.jackson.core:jackson-databind:2.16.0"

    // Cucumber + JUnit
    testImplementation "io.cucumber:cucumber-java:${cucumberVersion}"
    testImplementation "io.cucumber:cucumber-junit-platform-engine:${cucumberVersion}"
    testImplementation 'org.junit.platform:junit-platform-suite:1.10.2'
    testImplementation 'org.junit.platform:junit-platform-suite-api:1.10.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.2'

    implementation 'org.apache.commons:commons-lang3:3.14.0'
}

// Resource setup for test
sourceSets {
    test {
        resources {
            srcDirs = ['src/test/resources']
        }
    }
}

test {
    useJUnitPlatform()
    jvmArgs '--add-opens=java.base/java.lang=ALL-UNNAMED'
    jvmArgs '-Djdk.attach.allowAttachSelf=true'
    jvmArgs '-noverify'

    // Enable AspectJ weaving agent
    doFirst {
        jvmArgs "-javaagent:${configurations.runtimeClasspath.find { it.name.contains('aspectjweaver') }}"
        jvmArgs "-Daj.weaving.verbose=true"
    }

    systemProperty 'cucumber.execution.dry-run', 'false'
    systemProperty 'cucumber.glue', 'com.example.calculatorT'
    systemProperty 'cucumber.plugin', 'pretty'
    systemProperty 'cucumber.features', 'classpath:features'

    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        showExceptions true
        showCauses true
        showStackTraces true
        exceptionFormat = 'full'
    }

    // The most important part - ensure JaCoCo is properly attached
    jacoco {
        destinationFile = file("${buildDir}/jacoco/test.exec")
        // Explicitly include classes from the main project
        includes = ['com.example.calculator.*']
    }

    finalizedBy jacocoTestReport
}

shadowJar {
    archiveClassifier.set('all')
}

// Fixed task configuration for Cucumber tests with coverage
tasks.register('cucumberTests', Test) {
    description = 'Runs Cucumber tests with coverage'
    group = 'verification'

    useJUnitPlatform()
    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath

    jvmArgs '--add-opens=java.base/java.lang=ALL-UNNAMED'
    jvmArgs '-Djdk.attach.allowAttachSelf=true'
    jvmArgs '-noverify'

    // Configure AspectJ weaving
    doFirst {
        jvmArgs "-javaagent:${configurations.runtimeClasspath.find { it.name.contains('aspectjweaver') }}"
        jvmArgs "-Daj.weaving.verbose=true"
    }

    systemProperty 'cucumber.execution.dry-run', 'false'
    systemProperty 'cucumber.glue', 'com.example.calculatorT'
    systemProperty 'cucumber.plugin', 'pretty'
    systemProperty 'cucumber.features', 'classpath:features'

    // JaCoCo configuration - do NOT set toolVersion here
    jacoco {
        // The tool version is set at the project level, not the task level
        enabled = true
        includes = ['com.example.calculator.*']
        excludes = ['com.example.coverage.*', 'com.example.calculatorT.*']
        destinationFile = file("${buildDir}/jacoco/cucumber.exec")
    }

    finalizedBy 'jacocoCucumberReport'
}

tasks.register('jacocoCucumberReport', JacocoReport) {
    description = 'Generates code coverage report for Cucumber tests'
    group = 'reporting'
    dependsOn 'cucumberTests'

    executionData file("${buildDir}/jacoco/cucumber.exec")
    sourceDirectories.from = files(project(':').sourceSets.main.allSource.srcDirs)
    classDirectories.from = files(project(':').sourceSets.main.output.classesDirs)

    reports {
        xml.required = true
        html.required = true
        html.outputLocation = layout.buildDirectory.dir('reports/jacoco/cucumber')
    }
}

// Add new aggregated report task
tasks.register('jacocoAggregatedReport', JacocoReport) {
    description = 'Generates aggregated code coverage report combining unit tests and Cucumber tests'
    group = 'reporting'

    // This task depends on both unit tests and cucumber tests reports
    dependsOn(tasks.getByPath(':test'), 'cucumberTests')

    // Include execution data from both test types
    executionData fileTree(dir: "${buildDir}", includes: [
            'jacoco/test.exec',       // Unit test data
            'jacoco/cucumber.exec'    // Cucumber test data
    ])

    // Source directories from main project
    sourceDirectories.from = files(project(':').sourceSets.main.allSource.srcDirs)
    classDirectories.from = files(project(':').sourceSets.main.output.classesDirs)

    reports {
        xml.required = true
        html.required = true
        html.outputLocation = layout.buildDirectory.dir('reports/jacoco/aggregated')
    }
}

// Task to generate the HTML coverage report
tasks.register('generateCoverageReport', JavaExec) {
    description = 'Generates HTML report showing correlation between scenarios and methods'
    group = 'reporting'

    mainClass = 'com.example.coverage.GenerateCoverageReport'
    classpath = sourceSets.main.runtimeClasspath

    // This task should run after the cucumber tests have completed
    dependsOn 'cucumberTests'
    mustRunAfter 'jacocoCucumberReport'
}

// Task to run DeepSeek analysis
task runDeepSeekAnalysis(type: JavaExec) {
    description = 'Runs DeepSeek 7B analysis on the codebase for intelligent test coverage'
    group = 'analysis'

    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.example.coverage.DeepSeekAnalyzer'

    // Pass arguments to the DeepSeek analyzer
    args = [
            project(':').projectDir.toString() + '/src/main/java',    // Source directory
            'build/reports/deepseek',                                 // Output directory
            file('src/main/java/com/example/coverage/run_deepseek.sh').absolutePath  // DeepSeek script path
    ]
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }

    // The critical part - make sure we're analyzing the main project's classes
    sourceDirectories.from = files(project(':').sourceSets.main.allSource.srcDirs)
    classDirectories.from = files(project(':').sourceSets.main.output.classesDirs)
}

// Add a custom task that will run all test types and generate all reports
task fullCoverageReport {
    description = 'Runs all tests and generates all coverage reports (unit, cucumber, and aggregated)'
    group = 'verification'

    // Make sure all tests and reports run in the correct order
    dependsOn tasks.getByPath(':test')          // Run unit tests first
    dependsOn 'cucumberTests'                   // Then run cucumber tests
    dependsOn 'jacocoTestReport'                // Generate unit test report
    dependsOn 'jacocoCucumberReport'            // Generate cucumber test report
    dependsOn 'jacocoAggregatedReport'          // Generate aggregated report
    dependsOn 'generateCoverageReport'          // Generate HTML correlation report

    // Force the correct execution order
    tasks.findByName('generateCoverageReport').mustRunAfter('jacocoCucumberReport')
    tasks.findByName('jacocoAggregatedReport').mustRunAfter('jacocoTestReport', 'jacocoCucumberReport')
    tasks.findByName('jacocoCucumberReport').mustRunAfter('cucumberTests')
    tasks.findByName('jacocoTestReport').mustRunAfter(tasks.getByPath(':test'))
    tasks.findByName('cucumberTests').mustRunAfter(tasks.getByPath(':test'))
}