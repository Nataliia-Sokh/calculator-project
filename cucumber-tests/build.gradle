plugins {
    id 'java'
    id 'jacoco'
    id 'io.freefair.aspectj.post-compile-weaving' version '8.4'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

// Java compatibility settings
sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

repositories {
    mavenCentral()
}
// Global JaCoCo configuration
jacoco {
    toolVersion = "0.8.11"  // Set tool version globally
}

def cucumberVersion = '7.15.0'

dependencies {
    implementation project(':')

    // AspectJ runtime and weaver (weaving handled by plugin)
    implementation 'org.aspectj:aspectjrt:1.9.21'
    implementation 'org.aspectj:aspectjweaver:1.9.21'
    implementation "com.fasterxml.jackson.core:jackson-databind:2.16.0"

    // Cucumber + JUnit
    testImplementation "io.cucumber:cucumber-java:${cucumberVersion}"
    testImplementation "io.cucumber:cucumber-junit-platform-engine:${cucumberVersion}"
    testImplementation 'org.junit.platform:junit-platform-suite:1.10.2'
    testImplementation 'org.junit.platform:junit-platform-suite-api:1.10.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.2'

    implementation 'org.apache.commons:commons-lang3:3.14.0'
}

// Resource setup for test
sourceSets {
    test {
        resources {
            srcDirs = ['src/test/resources']
        }
    }
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

shadowJar {
    archiveClassifier.set('all')
}

// Force the use of a custom AspectJ configuration
// This ensures the CucumberCoverageAgent works correctly
task configureCucumberCoverage(type: Copy) {
    description = 'Ensures the AspectJ configuration is properly set'
    group = 'build'

    from 'src/test/resources/META-INF/aop.xml'
    into "${buildDir}/resources/main/META-INF"
    into "${buildDir}/resources/test/META-INF"

    doLast {
        println "AspectJ configuration file copied to META-INF directories"
    }
}

// Runs Cucumber tests with AspectJ weaving for method tracking
tasks.register('cucumberTests', Test) {
    description = 'Runs Cucumber tests with AspectJ weaving for method tracking'
    group = 'verification'

    useJUnitPlatform()
    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath

    jvmArgs '--add-opens=java.base/java.lang=ALL-UNNAMED'
    jvmArgs '-Djdk.attach.allowAttachSelf=true'
    jvmArgs '-noverify'

    // Configure AspectJ weaving with proper visibility
    doFirst {
        def aspectjWeaverJar = configurations.runtimeClasspath.find { it.name.contains('aspectjweaver') }
        jvmArgs "-javaagent:${aspectjWeaverJar}"
        jvmArgs "-Daj.weaving.verbose=true"

        // Pass additional system properties to ensure hooks are called
        systemProperty 'cucumber.coverage.enabled', 'true'

        // Debug info
        println "AspectJ weaver jar: ${aspectjWeaverJar}"
        println "Classpath includes Calculator: ${classpath.asPath.contains('Calculator')}"
    }

    systemProperty 'cucumber.execution.dry-run', 'false'
    systemProperty 'cucumber.glue', 'com.example.calculatorT'
    systemProperty 'cucumber.plugin', 'pretty'
    systemProperty 'cucumber.features', 'classpath:features'

    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        showExceptions true
        showCauses true
        showStackTraces true
        exceptionFormat = 'full'
    }

    // Add explicit task dependencies
    dependsOn 'configureCucumberCoverage'

    // Add explicit task to run at the end
    doLast {
        println "Cucumber method tracking completed. Generating method coverage report..."
        // Ensure the reports directory exists
        file("build/reports").mkdirs()
    }
}

// Separate run for JaCoCo code coverage
tasks.register('cucumberWithCoverage', Test) {
    description = 'Runs Cucumber tests with JaCoCo for coverage measurement'
    group = 'verification'

    useJUnitPlatform()
    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath

    // Add explicit dependency on configureCucumberCoverage
    dependsOn 'configureCucumberCoverage'

    systemProperty 'cucumber.execution.dry-run', 'false'
    systemProperty 'cucumber.glue', 'com.example.calculatorT'
    systemProperty 'cucumber.plugin', 'pretty'
    systemProperty 'cucumber.features', 'classpath:features'

    // Disable AspectJ to avoid conflicts
    systemProperty 'cucumber.coverage.enabled', 'false'

    // JaCoCo configuration
    jacoco {
        enabled = true
        includes = ['com.example.calculator.*']
        excludes = ['com.example.coverage.*', 'com.example.calculatorT.*']
        destinationFile = file("${buildDir}/jacoco/cucumber.exec")
    }

    finalizedBy 'jacocoCucumberReport'
}

// Generate JaCoCo report for Cucumber tests
tasks.register('jacocoCucumberReport', JacocoReport) {
    description = 'Generates code coverage report for Cucumber tests'
    group = 'reporting'
    dependsOn 'cucumberWithCoverage'

    executionData file("${buildDir}/jacoco/cucumber.exec")

    sourceDirectories.from = files(project(':').sourceSets.main.allSource.srcDirs)
    classDirectories.from = files(project(':').sourceSets.main.output.classesDirs)

    reports {
        xml.required = true
        html.required = true
        html.outputLocation = layout.buildDirectory.dir('reports/jacoco/cucumber')
    }
}

// Generate HTML report showing correlation between scenarios and methods
tasks.register('generateCoverageReport', JavaExec) {
    description = 'Generates HTML report showing correlation between scenarios and methods'
    group = 'reporting'

    mainClass = 'com.example.coverage.GenerateCoverageReport'
    classpath = sourceSets.main.runtimeClasspath

    // Check if the coverage file exists before running
    doFirst {
        def coverageFile = file("build/reports/cucumber-method-coverage.csv")
        if (!coverageFile.exists()) {
            def altFile = file("../build/reports/cucumber-method-coverage.csv")
            if (altFile.exists()) {
                println "Found coverage file in parent directory, copying..."
                copy {
                    from altFile
                    into "build/reports"
                }
            } else {
                logger.warn("Warning: cucumber-method-coverage.csv not found. Running cucumberTests task first...")
                tasks.getByName('cucumberTests').execute()
            }
        }
    }

    // Add explicit task dependencies
    dependsOn 'cucumberTests'
}

// Generate aggregated JaCoCo report
tasks.register('jacocoAggregatedReport', JacocoReport) {
    description = 'Generates aggregated code coverage report combining unit tests and Cucumber tests'
    group = 'reporting'

    dependsOn(tasks.getByPath(':test'), 'cucumberWithCoverage')

    executionData fileTree(dir: "${buildDir}", includes: [
            'jacoco/test.exec',
            'jacoco/cucumber.exec'
    ])

    sourceDirectories.from = files(project(':').sourceSets.main.allSource.srcDirs)
    classDirectories.from = files(project(':').sourceSets.main.output.classesDirs)

    reports {
        xml.required = true
        html.required = true
        html.outputLocation = layout.buildDirectory.dir('reports/jacoco/aggregated')
    }
}

// Diagnostic tool for CucumberCoverageAgent
task diagnoseCoverageAgent(type: JavaExec) {
    description = 'Diagnoses issues with the CucumberCoverageAgent'
    group = 'verification'

    mainClass = 'com.example.calculatorT.CoverageAgentDiagnostic'
    classpath = sourceSets.test.runtimeClasspath

    // Make sure the AspectJ weaving is applied
    jvmArgs "--add-opens=java.base/java.lang=ALL-UNNAMED"
    jvmArgs "-javaagent:${configurations.runtimeClasspath.find { it.name.contains('aspectjweaver') }}"
    jvmArgs "-Daj.weaving.verbose=true"

    // Add explicit dependency on configureCucumberCoverage
    dependsOn 'configureCucumberCoverage'

    doFirst {
        println "Running CucumberCoverageAgent diagnostic..."
    }
}

// Ensure AspectJ configuration is set up before tests run
tasks.getByName('compileTestJava').finalizedBy('configureCucumberCoverage')

// Main workflow task that runs everything
task fullCoverageWorkflow {
    description = 'Runs the complete workflow with both AspectJ tracking and JaCoCo coverage'
    group = 'verification'

    // First run the AspectJ method tracking
    dependsOn 'cucumberTests'

    // Let's ensure the coverage report is generated
    dependsOn 'generateCoverageReport'

    // Then run JaCoCo coverage instrumentation
    dependsOn 'cucumberWithCoverage'
    dependsOn 'jacocoCucumberReport'
    dependsOn 'jacocoAggregatedReport'

    // Ensure proper task ordering
    tasks.findByName('generateCoverageReport').mustRunAfter('cucumberTests')
    tasks.findByName('cucumberWithCoverage').mustRunAfter('generateCoverageReport')
    tasks.findByName('jacocoCucumberReport').mustRunAfter('cucumberWithCoverage')
    tasks.findByName('jacocoAggregatedReport').mustRunAfter('jacocoCucumberReport')
}

// Legacy task name for backward compatibility
task fullCoverageReport {
    description = 'Alias for fullCoverageWorkflow'
    group = 'verification'

    dependsOn 'fullCoverageWorkflow'
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }

    // Make sure we're analyzing the main project's classes
    sourceDirectories.from = files(project(':').sourceSets.main.allSource.srcDirs)
    classDirectories.from = files(project(':').sourceSets.main.output.classesDirs)
}

test {
    useJUnitPlatform()

    // Add explicit dependency on configureCucumberCoverage
    dependsOn 'configureCucumberCoverage'

    // If you need AspectJ weaving for this task, add:
    jvmArgs '--add-opens=java.base/java.lang=ALL-UNNAMED'
    jvmArgs '-Djdk.attach.allowAttachSelf=true'
    jvmArgs '-noverify'

    // Configure AspectJ weaving
    doFirst {
        def aspectjWeaverJar = configurations.runtimeClasspath.find { it.name.contains('aspectjweaver') }
        jvmArgs "-javaagent:${aspectjWeaverJar}"
        jvmArgs "-Daj.weaving.verbose=true"
    }

    finalizedBy jacocoTestReport
}